[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mcp-server-template"
version = "1.0.0"
description = "A robust template for building FastMCP servers with Docker support"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "Your Name", email = "your.email@example.com" }
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Networking",
]
requires-python = ">=3.11"
dependencies = [
    # Core MCP dependencies
    "fastmcp>=2.0.0",
    
    # Async and networking
    "uvicorn[standard]>=0.24.0",
    "httpx>=0.25.0",
    "websockets>=12.0",
    
    # Data handling
    "pydantic>=2.4.0",
    "python-multipart>=0.0.6",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "click>=8.0.0",
    "rich>=13.0.0",
    
    # System monitoring (optional)
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "httpx>=0.25.0",  # For testing HTTP clients
    
    # Code quality
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.2.0",
    "mkdocstrings[python]>=0.23.0",
]

production = [
    # Production monitoring and observability
    "prometheus-client>=0.17.0",
    "structlog>=23.1.0",
    
    # Database support (if needed)
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    
    # Caching
    "redis>=4.6.0",
]

all = [
    "mcp-server-template[dev,production]"
]

[project.urls]
Homepage = "https://github.com/your-username/mcp-server-template"
Documentation = "https://your-username.github.io/mcp-server-template"
Repository = "https://github.com/your-username/mcp-server-template.git"
Issues = "https://github.com/your-username/mcp-server-template/issues"
Changelog = "https://github.com/your-username/mcp-server-template/blob/main/CHANGELOG.md"

[project.scripts]
mcp-server = "src.server:main"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/scripts",
    "/docker",
    "README.md",
    "LICENSE",
    "pyproject.toml",
]

# =============================================================================
# Development Tools Configuration
# =============================================================================

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
    "network: Tests requiring network access",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.black]
target-version = ["py311", "py312"]
line-length = 100
skip-string-normalization = false
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["src"]
known_third_party = ["fastmcp", "pydantic", "uvicorn"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = [
    "psutil.*",
    "uvicorn.*",
]
ignore_missing_imports = true

[tool.flake8]
max-line-length = 100
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".eggs",
    "*.egg",
]
ignore = [
    "E203",  # whitespace before ':'
    "W503",  # line break before binary operator
    "E501",  # line too long (handled by black)
]
per-file-ignores = [
    "__init__.py:F401",  # imported but unused
    "tests/*:S101",      # use of assert
]

# =============================================================================
# Environment and Runtime Configuration
# =============================================================================

[tool.hatch.envs.default]
dependencies = [
    "mcp-server-template[dev]"
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov=src {args:tests}"
cov-report = "coverage report"
cov-html = "coverage html"
lint = "flake8 src tests"
format = "black src tests"
format-check = "black --check src tests"
sort-imports = "isort src tests"
sort-imports-check = "isort --check-only src tests"
type-check = "mypy src"
quality = [
    "sort-imports-check",
    "format-check", 
    "lint",
    "type-check",
]

[tool.hatch.envs.prod]
dependencies = [
    "mcp-server-template[production]"
]

[tool.hatch.envs.docs]
dependencies = [
    "mkdocs",
    "mkdocs-material",
    "mkdocstrings[python]",
]

[tool.hatch.envs.docs.scripts]
build = "mkdocs build --clean --strict"
serve = "mkdocs serve --dev-addr localhost:8080" 