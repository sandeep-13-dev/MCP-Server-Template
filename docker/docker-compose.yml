# =============================================================================
# MCP Server Template - Docker Compose Configuration
# =============================================================================

services:
  # ==========================================================================
  # Main MCP Server Service
  # ==========================================================================
  mcp-server:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: production
    image: mcp-server-template:latest
    container_name: mcp-server-template
    restart: unless-stopped
    
    # Network configuration
    ports:
      - "8000:8000"
    
    # Environment variables
    environment:
      # Server configuration
      MCP_SERVER_NAME: "MCP Server Template"
      MCP_HOST: "0.0.0.0"
      MCP_PORT: "8000"
      MCP_TRANSPORT: "http"
      
      # Logging
      LOG_LEVEL: "INFO"
      ENABLE_LOGGING: "true"
      
      # Features
      ENABLE_HEALTH_CHECK: "true"
      ENABLE_METRICS: "false"
      
      # Performance
      MAX_WORKERS: "4"
      TIMEOUT_SECONDS: "30"
      
      # Environment
      ENVIRONMENT: "production"
      DEBUG: "false"
    
    # Health check
    healthcheck:
      test: ["CMD", "python", "scripts/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Volume mounts
    volumes:
      - ../logs:/app/logs
      - ../data:/app/data  # Optional data directory
    
    # Network
    networks:
      - mcp-network

  # ==========================================================================
  # Development Server (for local development)
  # ==========================================================================
  mcp-server-dev:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: development
    image: mcp-server-template:dev
    container_name: mcp-server-template-dev
    profiles: ["dev"]  # Only start with --profile dev
    
    ports:
      - "8001:8000"
    
    environment:
      MCP_SERVER_NAME: "MCP Server Template (Dev)"
      MCP_HOST: "0.0.0.0"
      MCP_PORT: "8000"
      LOG_LEVEL: "DEBUG"
      ENVIRONMENT: "development"
      DEBUG: "true"
      RELOAD: "true"
    
    volumes:
      - ../src:/app/src:ro  # Mount source code for live reloading
      - ../tests:/app/tests:ro
      - ../logs:/app/logs
    
    networks:
      - mcp-network

  # ==========================================================================
  # Testing Service
  # ==========================================================================
  mcp-server-test:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: testing
    image: mcp-server-template:test
    container_name: mcp-server-template-test
    profiles: ["test"]  # Only start with --profile test
    
    environment:
      ENVIRONMENT: "testing"
    
    volumes:
      - ../tests:/app/tests:ro
      - ../coverage:/app/coverage  # Coverage reports
    
    networks:
      - mcp-network

  # ==========================================================================
  # Documentation Service
  # ==========================================================================
  mcp-docs:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: docs
    image: mcp-server-template:docs
    container_name: mcp-server-template-docs
    profiles: ["docs"]  # Only start with --profile docs
    
    ports:
      - "8080:8080"
    
    volumes:
      - ../docs:/app/docs:ro
      - ../README.md:/app/README.md:ro
    
    networks:
      - mcp-network

  # ==========================================================================
  # Optional Services
  # ==========================================================================
  
  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: mcp-redis
    profiles: ["full", "cache"]
    restart: unless-stopped
    
    ports:
      - "6379:6379"
    
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-defaultpassword}
    
    volumes:
      - redis-data:/data
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    
    networks:
      - mcp-network

  # PostgreSQL for data storage (optional)
  postgres:
    image: postgres:15-alpine
    container_name: mcp-postgres
    profiles: ["full", "database"]
    restart: unless-stopped
    
    ports:
      - "5432:5432"
    
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-mcp_server}
      POSTGRES_USER: ${POSTGRES_USER:-mcp_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-defaultpassword}
    
    volumes:
      - postgres-data:/var/lib/postgresql/data
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mcp_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    
    networks:
      - mcp-network

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus
    profiles: ["monitoring"]
    restart: unless-stopped
    
    ports:
      - "9090:9090"
    
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    
    networks:
      - mcp-network

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana
    profiles: ["monitoring"]
    restart: unless-stopped
    
    ports:
      - "3000:3000"
    
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    
    volumes:
      - grafana-data:/var/lib/grafana
      - ../monitoring/grafana:/etc/grafana/provisioning:ro
    
    networks:
      - mcp-network

# =============================================================================
# Networks
# =============================================================================
networks:
  mcp-network:
    driver: bridge
    name: mcp-network

# =============================================================================
# Volumes
# =============================================================================
volumes:
  redis-data:
    name: mcp-redis-data
  postgres-data:
    name: mcp-postgres-data
  prometheus-data:
    name: mcp-prometheus-data
  grafana-data:
    name: mcp-grafana-data 